var documenterSearchIndex = {"docs":
[{"location":"#DLWGMMIV","page":"Home","title":"DLWGMMIV","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DLWGMMIV","category":"page"},{"location":"#Setup","page":"Home","title":"Setup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DLWGMMIV can be installed from the package manager in Julia's REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/kgovernor/DLWGMMIV.jl.git","category":"page"},{"location":"#De-Loecker-and-Warzynski-GMM-IV-(DLWGMMIV)-Production-Function-Estimation","page":"Home","title":"De Loecker and Warzynski GMM IV (DLWGMMIV) Production Function Estimation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"dlwGMMIV","category":"page"},{"location":"#DLWGMMIV.dlwGMMIV","page":"Home","title":"DLWGMMIV.dlwGMMIV","text":"dlwGMMIV(year, plantid, Q, inputs...; <keyword arguments>)\n\nReturns results for estimated betas from GMM IV for industry's production function prodF given panel data with year, plantid, inputs... (with independent/dynamic inputs listed first), and output, Q.\n\nResults are returned as a NamedTuple.\n\nArguments\n\nnum_indp_inputs::Integer=1: the number of independent/dynamic inputs.\nbstart::Vector{Float64}: the starting beta values for optimization. Defaults to zeros.\nδ_nm::Float64=0.1: the Nelder-Mead shrink step parameter, delta.\nmax_iters::Integer=500: the maximum number of iterations ran in optimization.\n\nConfigurable Options\n\nprodF::String: the production function to estimate. Default is \"CD\", Cobb-Douglas; other options include \"tl\", TransLog.\nopt::String: the optimization method to use. Default is \"nm\", Nelder-Mead; other options include \"LBFGS\".\n\nExamples\n\njulia> using DLWGMMIV\n\njulia> df = DLWGMMIV.sim_data(20000, 10, input_names = [\"K\", \"L\"], prod_params = [0.1, 0.25]).df;\n[...]\n\njulia> data = [df.time, df.firm, df.Y, df.K, df.L];\n\njulia> res = dlwGMMIV(data...);\n\njulia> println(\"\nConverge = $(res.conv_msg)\\n\nObjective Value = $(res.other_results.crit)\\n\nbetas = $(res.beta_dlw)\n\")\nConverge = true\n\nObjective Value = 1.074768000861536e-9\n\nbetas = (beta_x1 = 0.10230132568110045, beta_x2 = 0.26251910427769287)\n\njulia> res = dlwGMMIV(data..., opt = \"LBFGS\");\n\njulia> println(\"\nConverge = $(res.conv_msg)\\n\nObjective Value = $(res.other_results.crit)\\n\nbetas = $(res.beta_dlw)\n\")\nConverge = true\n\nObjective Value = 3.6354547893764317e-19\n\nbetas = (beta_x1 = 0.10230132472854156, beta_x2 = 0.2625190996231563)\n\njulia> res = dlwGMMIV(data..., opt = \"LBFGS\", prodF = \"tl\");\n\njulia> println(\"\nConverge = $(res.conv_msg)\\n\nObjective Value = $(res.other_results.crit)\\n\nbetas = $(res.beta_dlw)\n\")\nConverge = true\n\nObjective Value = 3.1089429872638027e-15\n\nbetas = (beta_x1 = 0.11394854106849515, beta_x2 = 1.9222327345314836, beta_x1x2 = -0.5175358152780514, beta_x12 = -0.04266689698177511, beta_x22 = 0.00703394572086843)\n\n\n\n\n\n","category":"function"},{"location":"#Simulating-Firm-Data","page":"Home","title":"Simulating Firm Data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DLWGMMIV.sim_data","category":"page"},{"location":"#DLWGMMIV.sim_data","page":"Home","title":"DLWGMMIV.sim_data","text":"DLWGMMIV.sim_data(N, T; <keyword arguments>)\n\nReturns a NamedTuple containing a DataFrame of a panel dataset of N firms over T+1 periods with specified parameters.\n\nArguments\n\nnum_inputs::Integer=2: the total number of production inputs to generate.\nnum_indp_inputs::Integer=1: the number of independent inputs to generate.\ninput_names::Vector{String}: a list of input names. Default is `[\"K\",\"L\"]. Additional inputs get a value of \"X1\",\"X2\",... .\nprod_params::Vector{Real}: a list of parameters for the production function. Default is [0.1, 0.25]. Additional inputs get a value that is equal to 1 minus sum(prod_params) divided by the number of additional inputs, and TransLog second order terms get a value of 0.\ncost_params::Vector{Real}: a list of parameters for the cost function. Default is [0, 0.15]. Additional inputs get a value of 0.\nomega_params::Vector{Real}: a list of parameters for production technology function. Default is [0, 0.8, 0, 0].\nindp_inputs_params:: Vector{Real}: a list of parameters for independent inputs process. Default is [1]. Additional independent inputs get a value of 1.\nσ_ω::Real=1: the variance associated with the productivity shock each period.\nindp_inputs_lnmean::Vector{Real}: a list of natural log of mean values for each independent input. Default is [5]. Additional independent inputs get a value of 5.\nindp_inputs_lnvariance::Vector{Real}: a list of variances for each natural log of independent input. Default is [1]. Additional independent inputs get a value of 1.\nseed::Integer: sets a seed for Random number generator. Default is -1, no seed set.\nX_start::Integer=1000: set starting values for optimizer which calculates optimal level of dependent inputs for each firm.\n\nConfigurable Options\n\nprodF::String: the production function parameter. Default is \"CD\", Cobb-Douglas; other options include \"tl\", TransLog.\ncostF::String: the cost function parameter. Default is \"ce\", constant elasticity.\n\nExamples\n\njulia> using DLWGMMIV\n\njulia> df = DLWGMMIV.sim_data(20, 10).df\nSim Data for 2 inputs, CD\n\nK Parameters:\n    K_prod_params = 0.1 | K_cost_params = 0.0\nL Parameters:\n    L_prod_params = 0.25 | L_cost_params = 0.15\n\n    First order derivative at optimal L is approximately zero: true\n\n    Second order derivative at optimal L check: true\n\n=======================\n\nSUMMARY:\n        100.0% of observations passed first order conditions.\n        100.0% of observations passed second order conditions.\n\n=======================\n    \n220×18 DataFrame\nRow │ time   firm   S           Y           P          TC        omega_i    XI          K         L          C_K       C_L        rent_K   rent_L ⋯\n    │ Int64  Int64  Float64     Float64     Float64    Float64   Float64    Float64     Float64   Any        Float64   Float64    Float64  Float6 ⋯\n────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n  1 │     0      1   0.594649    3.60282    -647.634   651.237    0.687066   0.0        650.454   0.808584   650.454   0.783221       1.0  0.9686 ⋯\n  2 │     0      2   0.151929    1.02321    -119.13    120.154   -0.12898    0.0        119.931   0.270617   119.931   0.222438       1.0  0.8219  \n  3 │     0      3  -0.0790732   0.4036      -89.6328   90.0364  -0.828257   0.0         89.9487  0.120514    89.9487  0.0877392      1.0  0.7280  \n ⋮  │    ⋮      ⋮        ⋮           ⋮           ⋮          ⋮          ⋮          ⋮          ⋮          ⋮         ⋮          ⋮             ⋮        ⋮   ⋱ \n219 │    10     19  -0.26828     0.120173   -188.737   188.857   -1.85054    0.0152269  188.831   0.0420262  188.831   0.0261245      1.0  0.6216  \n220 │    10     20  -0.475736    0.0675116   -83.0301   83.0976  -2.21972   -1.24907     83.0829  0.025454    83.0829  0.0146764      1.0  0.5765 ⋯                                                                                                                      \n                                                                                                                      5 columns and 215 rows omitted\n\njulia> df = DLWGMMIV.sim_data(20, 10, num_inputs = 3, input_names = [\"k\", \"l\", \"m\"], prod_params = [0.1, 0.25, 0.2, 0.05], prodF =\"tl\").df\nSim Data for 3 inputs, tl\n\nk Parameters:\n    k_prod_params = 0.1 | k_cost_params = 0.0  \nl Parameters:\n    l_prod_params = 0.25 | l_cost_params = 0.15\nm Parameters:\n    m_prod_params = 0.2 | m_cost_params = 0.0  \nkl Parameters:\n    kl_prod_params = 0.05 |\nkm Parameters:\n    km_prod_params = 0.0 |\nlm Parameters:\n    lm_prod_params = 0.0 |\nk2 Parameters:\n    k2_prod_params = 0.0 |\nl2 Parameters:\n    l2_prod_params = 0.0 |\nm2 Parameters:\n    m2_prod_params = 0.0 |\n\n******************************************************************************\nThis program contains Ipopt, a library for large-scale nonlinear optimization.\n    Ipopt is released as open source code under the Eclipse Public License (EPL).\n            For more information visit https://github.com/coin-or/Ipopt\n******************************************************************************\n\n\n    First order derivative at optimal L is approximately zero: true\n\n    Second order derivative at optimal L check: true\n\n=======================\n\nSUMMARY:\n        100.0% of observations passed optimization generating the simulated data.\n        100.0% of observations passed first order conditions.\n        100.0% of observations passed second order conditions.\n\n=======================\n\n220×24 DataFrame\nRow │ time   firm   XI         k          l          m           Y          S          P          TC        omega_i    termination     C_k        ⋯   \n    │ Int64  Int64  Float64    Float64    Float64    Float64     Float64    Float64    Float64    Float64   Float64    String          Float64    ⋯\n────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── \n  1 │     0      1   0.0       245.378    0.0790147  0.0236492   0.118246   -1.53147   -245.337   245.456   -0.603513  LOCALLY_SOLVED  245.378    ⋯ \n  2 │     0      2   0.0       194.093    1.1433     0.522569    2.61285     0.465793  -193.17    195.782    0.494648  LOCALLY_SOLVED  194.093     \n  3 │     0      3   0.0        55.9995   0.0584379  0.0194533   0.0972665  -1.66692    -55.9599   56.0572  -0.663383  LOCALLY_SOLVED   55.9995    \n ⋮  │     ⋮      ⋮        ⋮          ⋮          ⋮          ⋮           ⋮          ⋮            ⋮         ⋮          ⋮             ⋮             ⋮      ⋱ \n219 │    10     19   0.117099  118.572    1.55853    0.783866    3.91933     0.64574   -117.102   121.021    0.72018   LOCALLY_SOLVED  118.572     \n220 │    10     20   0.460817    6.10519  0.227785   0.123259    0.616295   -0.741436    -5.7946    6.4109   0.257407  LOCALLY_SOLVED    6.10519  ⋯                                                                                                                     \n                                                                                                                     11 columns and 215 rows omitted                                                                                                                      \n\n\n\n\n\n","category":"function"},{"location":"#Optimization-Problem","page":"Home","title":"Optimization Problem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let N_independent and N be equal to num_indp_inputs and num_inputs, respectively. Let X_t = x_1t dots x_Nt in mathbbR_+^N and X_tindependent = x_1t dots x_N_independentt. N_independent must be greater than zero and less than N, 0  N_independent  N.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The firm chooses X_tdependent = X_t setminus X_tindependent that optimizes profits in each period t, t in T = 012dots.","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginequation\nmax_X_tdependent Profit_t(X_t omega_t) quad forall t in T\nendequation","category":"page"},{"location":"","page":"Home","title":"Home","text":"where omega_t is the technology parameter, and Profit_t(X_t omega_t) = Output_t(X_t omega_t) - Cost_t(X_t). The technology parameter omega_t is subject to a Total Factor Productivity (TFP) shock xi_t, where xi_t sim mathcalN(0 sigma_omega).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Exogenous variables at period t=0 are given by a random process. Specifically, for x_i0 in X_0independent, x_i0 sim mathcalN(mu_x_i sigma_x_i) and omega_0 = xi_0, where mu_x_i and sigma_x_i equal indp_inputs_lnmean[i] and indp_inputs_lnvariance[i]. For t0,","category":"page"},{"location":"","page":"Home","title":"Home","text":"x_it = alpha_x_i x_it-1","category":"page"},{"location":"","page":"Home","title":"Home","text":"omega_t = sum_i=0^3c_iomega_t-1^i + xi_t","category":"page"},{"location":"","page":"Home","title":"Home","text":"where alpha_x_i = sigma_alpha timesindp_inputs_params[i], sigma_alpha sim mathcalN(1 01), and c_i = omega_params[i].","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let X_t^* be the optimal solution to (1). Then,  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\nY_t  =  Output_t(X_t^* omega_t) \nTC_t = Cost_t(X_t^*) \nP_t  = Y - TC \nS_t  = log(Y_t) - omega_t \nC_x_it = Cost_t(x_it^*) \nrent_x_it = C_x_it  x_it^* \nshare_TC_x_it = C_x_it  TC_t \nshare_Y_x_it = C_x_it  Y_t \nendaligned","category":"page"},{"location":"#Production-Functions","page":"Home","title":"Production Functions","text":"","category":"section"},{"location":"#Cobb-Douglas","page":"Home","title":"Cobb Douglas","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Output_t(X_t omega_t) = exp(omega_t)prod_i=1^Nx_it^beta_i","category":"page"},{"location":"","page":"Home","title":"Home","text":"where prod_params = beta_1 beta_2 dots beta_N.","category":"page"},{"location":"#TransLog","page":"Home","title":"TransLog","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"beginalign*\nOutput_t(X_t omega_t) = exp(omega_t + sum_i=1^Nbeta_ilog(x_it) \n+ sum_i=1^Nsum_j=i^Nbeta_ijlog(x_it)log(x_jt))\nendalign*","category":"page"},{"location":"","page":"Home","title":"Home","text":"where prod_params = beta_1 beta_2 dots beta_N  beta_12 dots beta_1N dots beta_ii+1 dots beta_iN dots beta_N-1N  beta_11 beta_22 dots beta_NN.","category":"page"},{"location":"#Cost-Functions","page":"Home","title":"Cost Functions","text":"","category":"section"},{"location":"#Constant-Elasticity","page":"Home","title":"Constant Elasticity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cost_t(X_t) = sum_i=1^Nx_it^gamma_i+1","category":"page"},{"location":"","page":"Home","title":"Home","text":"where cost_params[i] = gamma_i.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Cobb-Douglas-Example","page":"Home","title":"Cobb Douglas Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's first simulate data for industry A with 20,000 firms over 10 periods with an additional initial period 0. The production function in industry A is Cobb-Douglas with two inputs capital, k, and labour, l with coefficients 0.1, 0.2, respectively.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let k be the only independent input, log(k_0) sim mathcalN(10 2). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"All other parameters accept default values.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using DLWGMMIV\n\njulia> input_names = [\"k\",\"l\"]\n\njulia> num_inputs = length(input_names)\n\njulia> prod_params = [0.1, 0.2]\n\njulia> indp_inputs_lnmean = [10]\n\njulia> indp_inputs_lnvariance = [2]\n\njulia> df = DLWGMMIV.sim_data(20000, 10, \n    num_inputs = num_inputs,\n    input_names = input_names, \n    prod_params = prod_params, \n    indp_inputs_lnmean = indp_inputs_lnmean, \n    indp_inputs_lnvariance = indp_inputs_lnvariance\n    ).df;\n\nSim Data for 2 inputs, CD\n\nk Parameters:\n  k_prod_params = 0.1 | k_cost_params = 0.0\nl Parameters:\n  l_prod_params = 0.2 | l_cost_params = 0.15\n\n  First order derivative at optimal L is approximately zero: true\n\n  Second order derivative at optimal L check: true\n\n=======================\n\nSUMMARY:\n        100.0% of observations passed first order conditions.\n        100.0% of observations passed second order conditions.\n\n=======================","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use the GMM IV to estimate the productivity parameters in industry A. Let's set bstart to [0.08, 0], assume a Cobb Douglas production function for industry A, and use both the Nelder Mead and LBFGS optimization methods. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> data = [df.time, df.firm, df.Y, df.k, df.l];\n\njulia> bstart = [0.08, 0];\n\njulia> res_nm = dlwGMMIV(data..., bstart = bstart);\n\njulia> res_lbfgs = dlwGMMIV(data..., bstart = bstart, opt = \"LBFGS\");\n\njulia> println(\"\nNelder Mead:\\n\nConverge = $(res_nm.conv_msg)\\n\nObjective Value = $(res_nm.other_results.crit)\\n\nbetas = $(res_nm.beta_dlw)\n\\n\nLBFGS:\\n\nConverge = $(res_lbfgs.conv_msg)\\n\nObjective Value = $(res_lbfgs.other_results.crit)\\n\nbetas = $(res_lbfgs.beta_dlw)\n\")\n\nNelder Mead:\n\nConverge = true\n\nObjective Value = 4.965822136980516e-10\n\nbetas = (beta_x1 = 0.09539780702143216, beta_x2 = 0.17476298604850368)\n\n\nLBFGS:\n\nConverge = true\n\nObjective Value = 1.42422490360313e-19\n\nbetas = (beta_x1 = 0.09539780702934003, beta_x2 = 0.17476298621274525)","category":"page"},{"location":"#TransLog-Example","page":"Home","title":"TransLog Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Now let's simulate data for industry B with 200 firms over 5 periods with an additional initial period 0. The production function in industry B is TransLog with three inputs capital, k, labour, l, and material, m with coefficients 0.1, 0.25, 0.2, respectively, and for second order term km the coefficient is 0.01.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All other parameters accept default values.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using DLWGMMIV\n\njulia> input_names = [\"k\",\"l\",\"m\"]\n\njulia> num_inputs = length(input_names)\n\njulia> prod_params = [0.1, 0.25, 0.2, 0, 0.01]\n\njulia> df = DLWGMMIV.sim_data(200, 5, \n    num_inputs = num_inputs,\n    input_names = input_names, \n    prod_params = prod_params,\n    prodF = \"tl\" \n    ).df;\n\nSim Data for 3 inputs, tl\n\nk Parameters:\n  k_prod_params = 0.1 | k_cost_params = 0.0\nl Parameters:\n  l_prod_params = 0.25 | l_cost_params = 0.15\nm Parameters:\n  m_prod_params = 0.2 | m_cost_params = 0.0\nkl Parameters:\n  kl_prod_params = 0.0 |\nkm Parameters:\n  km_prod_params = 0.01 |\nlm Parameters:\n  lm_prod_params = 0.0 |\nk2 Parameters:\n  k2_prod_params = 0.0 |\nl2 Parameters:\n  l2_prod_params = 0.0 |\nm2 Parameters:\n  m2_prod_params = 0.0 |\n\n  First order derivative at optimal L is approximately zero: true\n\n  Second order derivative at optimal L check: true\n\n=======================\n\nSUMMARY:\n        100.0% of observations passed optimization generating the simulated data.\n        100.0% of observations passed first order conditions.\n        100.0% of observations passed second order conditions.\n\n=======================","category":"page"},{"location":"","page":"Home","title":"Home","text":"Use the GMM IV to estimate the productivity parameters in industry B. Let's set bstart to [0.08, 0, 0, 0, 0.015, 0, 0, 0, 0], assume a TransLog production function for industry B, and use both the Nelder Mead and LBFGS optimization methods. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> data = [df.time, df.firm, df.Y, df.k, df.l, df.m];\n\njulia> bstart = [0.08, 0, 0, 0, 0.015, 0, 0, 0, 0];\n\njulia> res_nm = dlwGMMIV(data..., bstart = bstart, prodF = \"tl\");\n\njulia> res_lbfgs = dlwGMMIV(data..., bstart = bstart, opt = \"LBFGS\", prodF = \"tl\");\n\njulia> println(\"\nNelder Mead:\\n\nConverge = $(res_nm.conv_msg)\\n\nObjective Value = $(res_nm.other_results.crit)\\n\nbetas = $(res_nm.beta_dlw)\n\\n\nLBFGS:\\n\nConverge = $(res_lbfgs.conv_msg)\\n\nObjective Value = $(res_lbfgs.other_results.crit)\\n\nbetas = $(res_lbfgs.beta_dlw)\n\")\n\nNelder Mead:\n\nConverge = false\n\nObjective Value = 79.28554768851731\n\nbetas = (beta_x1 = 0.4453756727068648, beta_x2 = 1.2792439223699248, beta_x3 = -0.5006920829608563, beta_x1x2 = -0.21300433972699703, beta_x1x3 = 0.19994522566063533, beta_x2x3 = 0.0881743447457756, beta_x12 = -0.05639552788752075, beta_x22 = 0.08837596941633362, beta_x32 = -0.14734946617896608)\n\n\nLBFGS:\n\nConverge = false\n\nObjective Value = 0.0015682997593657287\n\nbetas = (beta_x1 = 0.5759958463450249, beta_x2 = 13.674180582661819, beta_x3 = -9.992663746360366, beta_x1x2 = 4.593764648836302, beta_x1x3 = -4.5375950132058565, beta_x2x3 = -1.7111532397047498, beta_x12 = 0.11862766042073726, beta_x22 = -7.3662414691120714, beta_x32 = 7.057850742289901)","category":"page"}]
}
